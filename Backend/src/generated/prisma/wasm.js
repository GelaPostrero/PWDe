
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UsersScalarFieldEnum = {
  email: 'email',
  password_hash: 'password_hash',
  phone_number: 'phone_number',
  user_type: 'user_type',
  account_status: 'account_status',
  is_verified: 'is_verified',
  user_id: 'user_id',
  password_reset_token: 'password_reset_token',
  created_at: 'created_at'
};

exports.Prisma.Pwd_ProfileScalarFieldEnum = {
  first_name: 'first_name',
  last_name: 'last_name',
  middle_name: 'middle_name',
  profile_picture: 'profile_picture',
  bio: 'bio',
  disability_Type: 'disability_Type',
  disability_severity: 'disability_severity',
  gender: 'gender',
  rating: 'rating',
  profile_views: 'profile_views',
  interviews: 'interviews',
  created_at: 'created_at',
  updated_at: 'updated_at',
  pwd_id: 'pwd_id',
  user_id: 'user_id',
  date_of_birth: 'date_of_birth',
  address: 'address',
  pwd_document: 'pwd_document',
  profession: 'profession',
  skills: 'skills',
  portfolio_url: 'portfolio_url',
  github_url: 'github_url',
  otherPlatform: 'otherPlatform',
  professional_role: 'professional_role',
  professional_summary: 'professional_summary',
  hourly_rate: 'hourly_rate',
  profile_visibility: 'profile_visibility',
  resume_cv: 'resume_cv',
  basic_information: 'basic_information',
  professional_experience: 'professional_experience',
  education: 'education',
  portfolio_items: 'portfolio_items',
  skills_assessment: 'skills_assessment',
  set_accessibility_preferences: 'set_accessibility_preferences'
};

exports.Prisma.Pwd_ExperienceScalarFieldEnum = {
  id: 'id',
  pwd_id: 'pwd_id',
  company: 'company',
  job_title: 'job_title',
  location: 'location',
  country: 'country',
  currently_working_on_this_role: 'currently_working_on_this_role',
  start_date: 'start_date',
  end_date: 'end_date',
  employment_type: 'employment_type',
  description: 'description',
  updated_at: 'updated_at'
};

exports.Prisma.Pwd_Accessibility_NeedsScalarFieldEnum = {
  id: 'id',
  pwd_id: 'pwd_id',
  visual_support: 'visual_support',
  hearing_support: 'hearing_support',
  mobility_support: 'mobility_support',
  cognitive_support: 'cognitive_support',
  additional_information: 'additional_information',
  updated_at: 'updated_at'
};

exports.Prisma.Pwd_EducationScalarFieldEnum = {
  id: 'id',
  pwd_id: 'pwd_id',
  highest_level: 'highest_level',
  institution: 'institution',
  location: 'location',
  degree: 'degree',
  field_of_study: 'field_of_study',
  graduation_details: 'graduation_details',
  year_graduated: 'year_graduated',
  updated_at: 'updated_at'
};

exports.Prisma.Pwd_Job_Preferences_RequirementsScalarFieldEnum = {
  id: 'id',
  pwd_id: 'pwd_id',
  updated_at: 'updated_at',
  employment_types: 'employment_types',
  experience_level: 'experience_level',
  salary_range: 'salary_range',
  work_arrangement: 'work_arrangement'
};

exports.Prisma.Employer_ProfileScalarFieldEnum = {
  rating: 'rating',
  created_at: 'created_at',
  updated_at: 'updated_at',
  employer_id: 'employer_id',
  user_id: 'user_id',
  address: 'address',
  profile_picture: 'profile_picture',
  profile_views: 'profile_views',
  interviews: 'interviews',
  company_name: 'company_name',
  company_email: 'company_email',
  company_phone: 'company_phone',
  company_address: 'company_address',
  company_social_media: 'company_social_media',
  company_website_portfolio: 'company_website_portfolio',
  company_github_profile: 'company_github_profile',
  company_other_portfolio: 'company_other_portfolio',
  company_description: 'company_description',
  contact_person_fullname: 'contact_person_fullname',
  contact_person_job_title: 'contact_person_job_title',
  contact_person_phone_number: 'contact_person_phone_number',
  date_of_birth: 'date_of_birth',
  businessRegistration: 'businessRegistration',
  governmentId: 'governmentId',
  taxDocuments: 'taxDocuments',
  industryPreference: 'industryPreference',
  jobRolesTypicallyHire: 'jobRolesTypicallyHire',
  requiredPreferredSkills: 'requiredPreferredSkills',
  workArrangement: 'workArrangement',
  accessibilityFeatures: 'accessibilityFeatures',
  set_company_profile: 'set_company_profile',
  set_jobRoles_requirements: 'set_jobRoles_requirements',
  set_work_environment: 'set_work_environment'
};

exports.Prisma.ResumesScalarFieldEnum = {
  resume_id: 'resume_id',
  pwd_id: 'pwd_id',
  title: 'title',
  summary: 'summary',
  skills: 'skills',
  work_experience: 'work_experience',
  education: 'education',
  certifications: 'certifications',
  achievements: 'achievements',
  file_path: 'file_path',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Chat_ThreadScalarFieldEnum = {
  is_active: 'is_active',
  application_id: 'application_id',
  employer_id: 'employer_id',
  pwd_id: 'pwd_id',
  thread_id: 'thread_id',
  created_at: 'created_at'
};

exports.Prisma.Chat_MessageScalarFieldEnum = {
  content: 'content',
  message_id: 'message_id',
  sender_id: 'sender_id',
  thread_id: 'thread_id',
  created_at: 'created_at'
};

exports.Prisma.Withdrawal_requestsScalarFieldEnum = {
  withdrawal_id: 'withdrawal_id',
  user_id: 'user_id',
  amount: 'amount',
  payment_method: 'payment_method',
  status: 'status',
  requested_at: 'requested_at',
  processed_at: 'processed_at',
  processed_by: 'processed_by'
};

exports.Prisma.ApplicationsScalarFieldEnum = {
  application_id: 'application_id',
  job_id: 'job_id',
  pwd_id: 'pwd_id',
  employer_id: 'employer_id',
  resume_id: 'resume_id',
  custom_message: 'custom_message',
  proposed_salary: 'proposed_salary',
  submitted_at: 'submitted_at',
  updated_at: 'updated_at',
  status_changed_at: 'status_changed_at'
};

exports.Prisma.ReviewsScalarFieldEnum = {
  review_id: 'review_id',
  reviewer_id: 'reviewer_id',
  reviewee_id: 'reviewee_id',
  application_id: 'application_id',
  rating: 'rating',
  comment: 'comment',
  reviewer_type: 'reviewer_type',
  is_public: 'is_public',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.TransactionsScalarFieldEnum = {
  transaction_id: 'transaction_id',
  payer_id: 'payer_id',
  payee_id: 'payee_id',
  application_id: 'application_id',
  amount: 'amount',
  payment_method: 'payment_method',
  transaction_type: 'transaction_type',
  status: 'status',
  reference_number: 'reference_number',
  created_at: 'created_at',
  processed_at: 'processed_at'
};

exports.Prisma.NotificationsScalarFieldEnum = {
  notification_id: 'notification_id',
  user_id: 'user_id',
  type: 'type',
  title: 'title',
  content: 'content',
  is_read: 'is_read',
  created_at: 'created_at',
  read_at: 'read_at'
};

exports.Prisma.Saved_JobsScalarFieldEnum = {
  savedJob_id: 'savedJob_id',
  job_id: 'job_id',
  pwd_id: 'pwd_id',
  employer_id: 'employer_id'
};

exports.Prisma.Job_ListingsScalarFieldEnum = {
  job_id: 'job_id',
  job_code: 'job_code',
  employer_id: 'employer_id',
  jobtitle: 'jobtitle',
  jobCategory: 'jobCategory',
  description: 'description',
  skills_required: 'skills_required',
  employment_type: 'employment_type',
  work_arrangement: 'work_arrangement',
  salary_min: 'salary_min',
  salary_max: 'salary_max',
  salary_type: 'salary_type',
  location_city: 'location_city',
  location_province: 'location_province',
  location_country: 'location_country',
  application_deadline: 'application_deadline',
  workplace_accessibility_features: 'workplace_accessibility_features',
  experience_level: 'experience_level',
  job_status: 'job_status',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Support_ticketsScalarFieldEnum = {
  ticket_id: 'ticket_id',
  user_id: 'user_id',
  subject: 'subject',
  description: 'description',
  category: 'category',
  priority: 'priority',
  status: 'status',
  assigned_to: 'assigned_to',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.ResourcesScalarFieldEnum = {
  resource_id: 'resource_id',
  created_by: 'created_by',
  title: 'title',
  description: 'description',
  resource_type: 'resource_type',
  file_path: 'file_path',
  category: 'category',
  target_audience: 'target_audience',
  created_at: 'created_at',
  updated_at: 'updated_at'
};

exports.Prisma.Ai_match_resultsScalarFieldEnum = {
  match_id: 'match_id',
  job_id: 'job_id',
  pwd_id: 'pwd_id',
  overall_score: 'overall_score',
  skills_match_score: 'skills_match_score',
  experience_match_score: 'experience_match_score',
  location_match_score: 'location_match_score',
  accessibility_match_score: 'accessibility_match_score',
  matched_on: 'matched_on'
};

exports.Prisma.Chatbot_logsScalarFieldEnum = {
  log_id: 'log_id',
  user_id: 'user_id',
  message: 'message',
  response: 'response',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.UserType = exports.$Enums.UserType = {
  PWD: 'PWD',
  Employer: 'Employer',
  Administrator: 'Administrator'
};

exports.AccountStatus = exports.$Enums.AccountStatus = {
  Active: 'Active',
  Inactive: 'Inactive',
  Suspended: 'Suspended',
  Deleted: 'Deleted'
};

exports.Disability_Severity = exports.$Enums.Disability_Severity = {
  Mild: 'Mild',
  Moderate: 'Moderate',
  Severe: 'Severe'
};

exports.Gender = exports.$Enums.Gender = {
  Male: 'Male',
  Female: 'Female',
  Other: 'Other'
};

exports.WithdrawalStatus = exports.$Enums.WithdrawalStatus = {
  Pending: 'Pending',
  Approved: 'Approved',
  Rejected: 'Rejected',
  Processed: 'Processed'
};

exports.ReviewerType = exports.$Enums.ReviewerType = {
  Employer: 'Employer',
  Job_Seeker: 'Job_Seeker'
};

exports.TransactionType = exports.$Enums.TransactionType = {
  Payment: 'Payment',
  Withdrawal: 'Withdrawal',
  Refund: 'Refund',
  Fee: 'Fee'
};

exports.TransactionStatus = exports.$Enums.TransactionStatus = {
  Pending: 'Pending',
  Completed: 'Completed',
  Failed: 'Failed',
  Cancelled: 'Cancelled'
};

exports.TicketCategory = exports.$Enums.TicketCategory = {
  Technical: 'Technical',
  Account: 'Account',
  Payment: 'Payment',
  Discrimination: 'Discrimination',
  Accessibility: 'Accessibility',
  Other: 'Other'
};

exports.TicketPriority = exports.$Enums.TicketPriority = {
  Low: 'Low',
  Medium: 'Medium',
  High: 'High',
  Urgent: 'Urgent'
};

exports.TicketStatus = exports.$Enums.TicketStatus = {
  Open: 'Open',
  In_Progress: 'In_Progress',
  Resolved: 'Resolved',
  Closed: 'Closed'
};

exports.TargetAudience = exports.$Enums.TargetAudience = {
  PWD: 'PWD',
  Employer: 'Employer',
  All: 'All'
};

exports.Prisma.ModelName = {
  Users: 'Users',
  Pwd_Profile: 'Pwd_Profile',
  Pwd_Experience: 'Pwd_Experience',
  Pwd_Accessibility_Needs: 'Pwd_Accessibility_Needs',
  Pwd_Education: 'Pwd_Education',
  Pwd_Job_Preferences_Requirements: 'Pwd_Job_Preferences_Requirements',
  Employer_Profile: 'Employer_Profile',
  Resumes: 'Resumes',
  Chat_Thread: 'Chat_Thread',
  Chat_Message: 'Chat_Message',
  withdrawal_requests: 'withdrawal_requests',
  Applications: 'Applications',
  reviews: 'reviews',
  transactions: 'transactions',
  Notifications: 'Notifications',
  Saved_Jobs: 'Saved_Jobs',
  Job_Listings: 'Job_Listings',
  support_tickets: 'support_tickets',
  resources: 'resources',
  ai_match_results: 'ai_match_results',
  chatbot_logs: 'chatbot_logs'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
